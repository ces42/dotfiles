#!/bin/bash


#
# Set up paths
# 

initial_directory=$(pwd)
file_in=$(readlink -f "$1")
file_out=$(readlink -f "$2")
file_out_basename=$(basename "$file_out")

if [[ -z $file_out_basename ]]; then
    echo "need output file name" >&2
    exit 2
fi

#
# Set up the temporary storage
#

tmpdir=$(mktemp -d)
cd $tmpdir

function cleanup() 
{
    rm -rf $tmpdir
    cd $initial_directory
}
trap "cleanup" EXIT # makes sure we clean up after ourselves

#
# Extract raw pages and text
#

ddjvu -format=tiff -quality=80 "$file_in" tmp_multipage.tiff
tiffsplit tmp_multipage.tiff tmp_page_
rm tmp_multipage.tiff
num_pages=$(djvused -e 'n' "$file_in")
strlen_num_pages="${#num_pages}"

task() {
	i=$1
    j=$(printf "%0${strlen_num_pages}d" $i)
    mv $page_alpha tmp_page_${j}.tiff

    # OCR content needs to have one html file per page for `pdfbeads`;
    # `djvu2hocr` is capable of extracting it all at once, but then it
    # goes into one big file which we would need to split afterwards,
    # this would require html parsing, which is just too much.  The
    # s/ocrx/ocr/g substitution is a small hack to make `pdfbeads`
    # understand the output from `djvu2hocr`.

    djvu2hocr "$file_in" -p $i | sed 's/ocrx/ocr/g' > tmp_page_${j}.html
}

i=0
num=0
N=6
(
for page_alpha in tmp_page_*; do
	num=$(($num+1))
	((i=i%N)); ((i++==0)) && wait
	task $num &
done
)


#
# Generate the TOC
#

cd $initial_directory
djvused -e 'print-outline' "$file_in" > $tmpdir/toc.txt

# The output returned by `djvused` has an s-expression like
# tree structure, which is incompatible with the indentation based
# structure used by `pdfbeads`

djvu2pdf_toc_parser.py < $tmpdir/toc.txt > $tmpdir/toc.out.txt


#
# Generate the final PDF
#
cd $tmpdir

pdfbeads --toc toc.out.txt -o output.pdf

cd $initial_directory

mv $tmpdir/output.pdf "$file_out"

