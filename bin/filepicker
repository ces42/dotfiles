#!/bin/env bash
#invoke with sh -c "xdotool search --classname fzf-filepicker windowmap; xdotool search --classname fzf-filepicker windowactivate || stterm -n fzf-filepicker -g '148x25+100+200' -f 'Source Code Pro-14' -e 'filepicker'"
#{sleep .01; wmctrl -r :ACTIVE: -b toggle,skip_taskbar}&!
SHORTENS=('Books' 'Uni' 'BooksMath' 'papers')
for d in ${SHORTENS[@]}; do
	SED_CORE=${SED_CORE:+$SED_CORE'\|'}$d
done
SED="s#^Documents/\($SED_CORE\)/#~\1/#"
SEDBACK="s#^~\($SED_CORE\)/#Documents/\1/#"

IFS='
'
PATH="$PATH:$HOME/.fzf/bin"
tput smkx
IGNORES=(--no-ignore-vcs -E '{*.aux,*.bbl,*.blg,*.fls,*.toc,*.out,*.fdb_latexmk,*.synctex.gz}')

dirs=(/home/ca/ /home/ca/.config/nvim /home/ca/.oh-my-zsh)

out=$(
fd --strip-cwd-prefix -L "${IGNORES[@]}" . $dirs | sed $SED | fzf $*\
		--multi \
		--reverse \
		--tiebreak=length \
		--preview 'f=$(echo {} | sed "'$SEDBACK'"); ls -lah --color=always $f && { [[ $(file --mime $f | awk -F";" "{print $1}") =~ application/pdf ]] && pdftotext -l 10 $f - | head -500 } || { [[ $(file --mime $f | awk -F";" "{print $1}") =~ image ]] && tiv $f -w 77 -h 300 2> /dev/null} || { [[ $(file --mime $f | awk -F";" "{print $1}") =~ binary ]] && echo binary file } || { [[ $f == *.ipynb ]] && jut --force-colors $f | head -500 } || { (bat --style=numbers --color=always $f) 2> /dev/null | head -500 }' \
		--bind "ctrl-y:execute-silent(echo -n {} | xclip -i)" \
		--bind "f2:toggle-preview,ctrl-h:backward-kill-word,ctrl-t:accept" \
		--bind "alt-d:change-prompt(D> )+reload(fd --strip-cwd-prefix -L --type d $IGNORES)" \
		--bind "alt-f:change-prompt(F> )+reload(fd --strip-cwd-prefix -L --type f $IGNORES)"\
		--aind "f5:reload(fd --strip-cwd-prefix -L $IGNORES)" \
		--preview-window "right:50%:border-left:hidden" \
		--color=fg:#ffffff,hl:#00a000 \
		--color=fg+:#ffff20,bg+:#262626,hl+:#20ff20 \
		--color=info:#afaf87,prompt:#07cdff \
		--color=marker:#87ff00,spinner:#af5fff,header:#87afaf \
		--expect=ctrl-o,alt-enter,ctrl-]
	)
IFS=''

#echo $(echo $out | awk -F "\n" "{print $1}")
out=$(echo $out | sed $SEDBACK)
mode=$(echo $out | head -n 1)
files=$(echo $out | tail -n +2)
echo $mode
echo $files

if [[ $mode == "ctrl-o" ]]; then
	for f in "$files"; do
		if [ -d "$f" ]; then
			detach xdg-open "$f"
		elif [[ "$(file --mime "$f")" =~ application/pdf ]]; then
			detach okular "$f"
		fi
	done
elif [[ $mode == "alt-enter" ]]; then
	for f in "$files"; do
		open=$(dmenu_path | dmenu "$@")
		#echo "$open $f"
		detach zsh -c "$open $f"
	done
elif [[ $mode == "ctrl-]" ]]; then
	for f in "$files"; do
		eval "$(xdotool getmouselocation --shell)"
		detach dragon --and-exit "$f"
		while true; do
			xid="$(xdotool search --onlyvisible --class  dragon | head -n 2)"
			test -z "$xid" || break
			sleep 0.05
		done
		xdotool windowmove $xid 100 100
		sleep 0.02
		xdotool mousemove --sync -w "$xid" 1 1
		sleep 0.02
		xdotool mousedown 1
		sleep 0.02
		xdotool mousemove $X $Y
	done
else
	#for_vim=""
	for f in "$files"; do
		#if [[ "$f" =~ .*\.(txt|md|log|py|tex|cpp|c|h|xml|html|sh|zsh|bib) ]]; then
		#	for_vim="$for_vim $f"
		#	continue
		#fi
		echo 'file: '$f
		if [ -d "$f" ]; then
 			detach kitty-tab "~/$f"
		else
			detach xdg-open "$f"
		fi
	done
	#if [ -n "$for_vim" ]; then
	#	eval detach kitty -e "vi -p $for_vim"
	#fi
fi

done
